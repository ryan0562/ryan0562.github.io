(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{452:function(v,a,_){v.exports=_.p+"assets/img/microFrontEnd.dc7db75a.jpg"},453:function(v,a,_){v.exports=_.p+"assets/img/diff.48f23f74.png"},528:function(v,a,_){"use strict";_.r(a);var i=_(2),t=Object(i.a)({},(function(){var v=this,a=v._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h1",{attrs:{id:"什么是微前端"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是微前端"}},[v._v("#")]),v._v(" 什么是微前端")]),v._v(" "),a("ul",[a("li",[v._v("微前端是一种多个团队通过独立发布功能的方式来共同构建现代化 web 应用的技术手段及方法策略。")]),v._v(" "),a("li",[v._v("背后的理念是将网站或网页应用视为独立团队所拥有的功能的组合。每个团队都有自己关心和擅长的独特业务或任务领域。")]),v._v(" "),a("li",[v._v("微前端是一种类似于微服务的架构，它将微服务的理念应用于浏览器端，即将 Web 应用由单一的单体应用转变为多个小型前端应用聚合为一的应用。各个前端应用还可以独立运行、独立开发、独立部署。")])]),v._v(" "),a("h2",{attrs:{id:"工作中遇到的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工作中遇到的问题"}},[v._v("#")]),v._v(" 工作中遇到的问题")]),v._v(" "),a("ul",[a("li",[v._v("项目太大，成为了典型的巨石应用，打包很慢。")]),v._v(" "),a("li",[v._v("项目开发者太多，多个同学开发同一套代码，经常出现代码冲突、或修改公共组件引发的 Bug。")]),v._v(" "),a("li",[v._v("项目太老，存在遗留模块，为了兼容它，限制了整个项目的发展。")]),v._v(" "),a("li",[v._v("项目技术栈不统一，使用了多种不同框架，每一种框架又有多个版本共存的情况。")]),v._v(" "),a("li",[v._v("项目由多个团队协同开发，一个功能需要等其他团队开发好之后，才能接着开发。")]),v._v(" "),a("li",[v._v("项目每次发布都是全量发布，即使是上线一个小模块，也可能导致整个项目挂掉。")]),v._v(" "),a("li",[v._v("项目由多个系统组成，完成一个功能需要不断地跳转多个系统页。")]),v._v(" "),a("li",[v._v("项目开发人员流动大，存在一些祖传代码难以维护，一般人都不好改。")]),v._v(" "),a("li",[v._v("项目需要一些试验田方案，即需要在某些模块做一些新技术尝试、框架升级等。")])]),v._v(" "),a("h2",{attrs:{id:"微前端诞生所解决的痛点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#微前端诞生所解决的痛点"}},[v._v("#")]),v._v(" 微前端诞生所解决的痛点")]),v._v(" "),a("blockquote",[a("p",[v._v("所有大型系统都将从有序变为无序，他们背后的 codebase 的归宿都将是「屎山」。")])]),v._v(" "),a("ul",[a("li",[v._v("遗留项目续命，如何确保我的遗留项目代码能平滑的迁移，以及如何确保我在若干年后还能用上时下热门的技术栈")]),v._v(" "),a("li",[v._v("解构巨石应用，巨石应用随着技术更迭、产品升级、人员流动带来的工程上的问题。解构之后还需要再重组，重组的过程中我们就会碰到各种 隔离性、依赖去重、通信、应用编排等问题")]),v._v(" "),a("li",[v._v("技术栈，应用之间不应该有任何直接或间接的技术栈、依赖、以及实现上的耦合。")]),v._v(" "),a("li",[v._v("技术依赖，现在的依赖库，1年以上的项目更新依赖库后是否还能跑？")])]),v._v(" "),a("h2",{attrs:{id:"应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[v._v("#")]),v._v(" 应用场景")]),v._v(" "),a("ul",[a("li",[v._v("你/你的团队不具备系统内所有架构组件的话语权")]),v._v(" "),a("li",[v._v("你/你的团队 有足够动力去治理、改造这个系统中的所有组件，直接改造存量系统的收益大于新老系统混杂带来的问题。")]),v._v(" "),a("li",[v._v("系统及组织架构上，各部件之间本身不是强耦合、自洽、不可分离的，本身不是最小单元应用")]),v._v(" "),a("li",[v._v("旧系统不能下，新需求还在来")]),v._v(" "),a("li",[v._v("跨团队，部门协作导致效率低下")])]),v._v(" "),a("p",[a("img",{attrs:{src:_(452),alt:"微前端"}})]),v._v(" "),a("h2",{attrs:{id:"微前端架构具备以下几个核心价值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#微前端架构具备以下几个核心价值"}},[v._v("#")]),v._v(" 微前端架构具备以下几个核心价值：")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("技术栈无关\n主框架不限制接入应用的技术栈，微应用具备完全自主权")])]),v._v(" "),a("li",[a("p",[v._v("独立开发、独立部署\n微应用仓库独立，前后端可独立开发，部署完成后主框架自动完成同步更新")])]),v._v(" "),a("li",[a("p",[v._v("增量升级\n在面对各种复杂场景时，我们通常很难对一个已经存在的系统做全量的技术栈升级或重构，而微前端是一种非常好的实施渐进式重构的手段和策略")])]),v._v(" "),a("li",[a("p",[v._v("独立运行时\n每个微应用之间状态隔离，运行时状态不共享")])])]),v._v(" "),a("h2",{attrs:{id:"流行的几种微前端解决方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#流行的几种微前端解决方案"}},[v._v("#")]),v._v(" 流行的几种微前端解决方案")]),v._v(" "),a("h3",{attrs:{id:"iframe"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iframe"}},[v._v("#")]),v._v(" Iframe")]),v._v(" "),a("p",[v._v('为什么不用 iframe，这几乎是所有微前端方案第一个会被 challenge 的问题。但是大部分微前端方案又不约而同放弃了 iframe 方案，自然是有原因的，并不是为了 "炫技" 或者刻意追求 "特立独行"。')]),v._v(" "),a("blockquote",[a("p",[v._v("如果不考虑体验问题，iframe 几乎是最完美的微前端解决方案了。")])]),v._v(" "),a("blockquote",[a("p",[v._v("iframe 最大的特性就是提供了浏览器原生的硬隔离方案，不论是样式隔离、js 隔离这类问题统统都能被完美解决。但他的最大问题也在于他的隔离性无法被突破，导致应用间上下文无法被共享，随之带来的开发体验、产品体验的问题。")])]),v._v(" "),a("ol",[a("li",[v._v("url 不同步。浏览器刷新 iframe url 状态丢失、后退前进按钮无法使用。")]),v._v(" "),a("li",[v._v("UI 不同步，DOM 结构不共享。想象一下屏幕右下角 1/4 的 iframe 里来一个带遮罩层的弹框，同时我们要求这个弹框要浏览器居中显示，还要浏览器 resize 时自动居中..")]),v._v(" "),a("li",[v._v("全局上下文完全隔离，内存变量不共享。iframe 内外系统的通信、数据同步等需求，主应用的 cookie 要透传到根域名都不同的子应用中实现免登效果。")]),v._v(" "),a("li",[v._v("慢。每次子应用进入都是一次浏览器上下文重建、资源重新加载的过程。")])]),v._v(" "),a("p",[v._v("其中有的问题比较好解决(问题1)，有的问题我们可以睁一只眼闭一只眼(问题4)，但有的问题我们则很难解决(问题3)甚至无法解决(问题2)，而这些无法解决的问题恰恰又会给产品带来非常严重的体验问题， 最终导致我们舍弃了 iframe 方案。")]),v._v(" "),a("h3",{attrs:{id:"阿里qiankun"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阿里qiankun"}},[v._v("#")]),v._v(" 阿里qiankun")]),v._v(" "),a("p",[v._v("qiankun 是一个基于 single-spa 的微前端实现库，旨在帮助大家能更简单、无痛的构建一个生产可用微前端架构系统。")]),v._v(" "),a("p",[v._v("single-spa是通过监听 url change 事件，在路由变化时匹配到渲染的子应用并进行渲染，这个思路也是目前实现微前端的主流方式。同时single-spa要求子应用修改渲染逻辑并暴露出三个方法：bootstrap、mount、unmount，分别对应初始化、渲染和卸载，这也导致子应用需要对入口文件进行修改。因为qiankun是基于single-spa进行封装，所以这些特点也被qiankun继承下来，并且需要对webpack配置进行一些修改。")]),v._v(" "),a("h4",{attrs:{id:"特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特性"}},[v._v("#")]),v._v(" 特性")]),v._v(" "),a("ol",[a("li",[v._v("基于 single-spa 封装，提供了更加开箱即用的 API。")]),v._v(" "),a("li",[v._v("技术栈无关，任意技术栈的应用均可 使用/接入，不论是 React/Vue/Angular/JQuery 还是其他等框架。")]),v._v(" "),a("li",[v._v("HTML Entry 接入方式，让你接入微应用像使用 iframe 一样简单。")]),v._v(" "),a("li",[v._v("样式隔离，确保微应用之间样式互相不干扰。")]),v._v(" "),a("li",[v._v("JS 沙箱，确保微应用之间 全局变量/事件 不冲突。")]),v._v(" "),a("li",[v._v("资源预加载，在浏览器空闲时间预加载未打开的微应用资源，加速微应用打开速度。")]),v._v(" "),a("li",[v._v("umi 插件，提供了 @umijs/plugin-qiankun 供 umi 应用一键切换成微前端架构系统。")])]),v._v(" "),a("h4",{attrs:{id:"兼容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#兼容"}},[v._v("#")]),v._v(" 兼容")]),v._v(" "),a("p",[v._v("qiankun 兼容 ie")]),v._v(" "),a("p",[v._v("但是 IE 环境下（不支持 Proxy 的浏览器）只能使用单实例模式，qiankun 会自动将 singular 配置为 true。")]),v._v(" "),a("p",[v._v("如果希望 qiankun （或其依赖库、或者您的应用本身）在 IE 下正常运行，你至少需要在应用入口引入 polyfills")]),v._v(" "),a("h4",{attrs:{id:"部分问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#部分问题"}},[v._v("#")]),v._v(" 部分问题")]),v._v(" "),a("ol",[a("li",[v._v("微应用打包之后 css 中的字体文件和图片加载 404")])]),v._v(" "),a("p",[v._v("原因：qiankun 将外链样式改成了内联样式，但是字体文件和背景图片的加载路径是相对路径")]),v._v(" "),a("p",[v._v("解决：路径外链（CDN,OSS）、webpack转base或者添加全部路径")]),v._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[v._v("运营商动态插入的脚本加载异常导致微应用加载失败的问题")])]),v._v(" "),a("p",[v._v("原因：这类脚本一旦运行失败，将会导致整个应用被 block 且后续的脚本也不再执行")]),v._v(" "),a("p",[v._v("解决：通过自己实现的 getTemplate 方法过滤微应用 HTML 模板中的异常脚本")]),v._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[v._v("微应用路径下刷新后 404")])]),v._v(" "),a("p",[v._v("原因：通常是因为你使用的是 browser 模式的路由")]),v._v(" "),a("p",[v._v("解决：这种路由模式的开启需要服务端配合才行")]),v._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[v._v("微应用文件更新之后，访问的还是旧版文件")])]),v._v(" "),a("p",[v._v("原因：缓存")]),v._v(" "),a("p",[v._v("解决：服务器需要给微应用的 index.html 配置一个响应头：Cache-Control no-cache，意思就是每次请求都检查是否更新。")]),v._v(" "),a("h3",{attrs:{id:"京东mirco-app"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#京东mirco-app"}},[v._v("#")]),v._v(" 京东mirco-app")]),v._v(" "),a("p",[v._v("micro-app并没有沿袭single-spa的思路，而是借鉴了WebComponent的思想，通过CustomElement结合自定义的ShadowDom，将微前端封装成一个类WebComponent组件，从而实现微前端的组件化渲染。并且由于自定义ShadowDom的隔离特性，micro-app不需要像single-spa和qiankun一样要求子应用修改渲染逻辑并暴露出方法，也不需要修改webpack配置，是目前市面上接入微前端成本最低的方案。")]),v._v(" "),a("h4",{attrs:{id:"优势"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优势"}},[v._v("#")]),v._v(" 优势")]),v._v(" "),a("ol",[a("li",[a("p",[v._v("使用简单\n我们将所有功能都封装到一个类WebComponent组件中，从而实现在基座应用中嵌入一行代码即可渲染一个微前端应用。\n同时micro-app还提供了js沙箱、样式隔离、元素隔离、预加载、数据通信、静态资源补全等一系列完善的功能。")])]),v._v(" "),a("li",[a("p",[v._v("零依赖\nmicro-app没有任何依赖，这赋予它小巧的体积和更高的扩展性。")])]),v._v(" "),a("li",[a("p",[v._v("兼容所有框架\n为了保证各个业务之间独立开发、独立部署的能力，micro-app做了诸多兼容，在任何技术框架中都可以正常运行。")])])]),v._v(" "),a("h4",{attrs:{id:"兼容-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#兼容-2"}},[v._v("#")]),v._v(" 兼容")]),v._v(" "),a("p",[v._v("PC端：除了IE浏览器，其它浏览器基本兼容。")]),v._v(" "),a("p",[v._v("移动端：ios10+、android5+")]),v._v(" "),a("h4",{attrs:{id:"部分问题-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#部分问题-2"}},[v._v("#")]),v._v(" 部分问题")]),v._v(" "),a("ol",[a("li",[v._v("部分场景下，开发时每次保存文件时报错 (热更新导致报错)\n问题：在一些场景下，热更新会导致保存时报错\n解决：请关闭热更新来解决这个问题，同时我们也在尝试更好的解决方案。")]),v._v(" "),a("li",[v._v("vue3样式失效，通过禁用样式隔离解决。")]),v._v(" "),a("li",[v._v("vue3图片等静态资源无法正常加载，vue3中需要配置publicPath补全资源路径，详情请查看publicPath")]),v._v(" "),a("li",[v._v("虽然我们将子应用的样式进行隔离，但基座应用的样式依然会影响到子应用，如果发生冲突，推荐通过约定前缀或CSS Modules方式解决")]),v._v(" "),a("li",[v._v("频繁渲染、卸载应用后内存越来越大，需要切换为umd模式")]),v._v(" "),a("li",[v._v("子应用a标签下载失败，换成blob下载")])]),v._v(" "),a("h3",{attrs:{id:"对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对比"}},[v._v("#")]),v._v(" 对比")]),v._v(" "),a("ol",[a("li",[v._v("两者对于vite的支持有限，qiankun需要一个社区插件，micro-app需要修改大量的配置")]),v._v(" "),a("li",[v._v("对于子应用都需要跨域")]),v._v(" "),a("li",[v._v("qiankun的社区相对较成熟并且有钉钉群收集反馈问题，micro-app的社区还在完善，只有github讨论群")]),v._v(" "),a("li",[v._v("在vue框架下，dom的开销大概是原生的2倍左右，js沙盒启用后接近200倍了，原因是沙盒模式使用proxy做了代理，在比对VNode时，proxy代理返回的VNode和原本的VNode是不等的，但实际上VNode是无变化的")]),v._v(" "),a("li")]),v._v(" "),a("p",[a("img",{attrs:{src:_(453),alt:"微前端"}})]),v._v(" "),a("h3",{attrs:{id:"改造项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#改造项"}},[v._v("#")]),v._v(" 改造项")]),v._v(" "),a("ol",[a("li",[v._v('跳转到子应用必须要封口 例如：to="/child-vue/" ，不能：to="/child-vue"')]),v._v(" "),a("li",[v._v("子应用name不能使用中文，必须以字母开头，且不可以带有除中划线和下划线外的特殊符号")]),v._v(" "),a("li",[v._v("在微前端的沙箱环境中，顶层变量不会泄漏为全局变量。不允许使用var、function xx () {}\n例如在正常情况下，通过 var name 或 function name () {} 定义的顶层变量会泄漏为全局变量，通过window.name或name就可以全局访问。\n但是在沙箱环境下这些顶层变量无法泄漏为全局变量，window.name或name为undefined，导致出现问题。")]),v._v(" "),a("li",[v._v("路由类型约束\n基座是hash路由，子应用也必须是hash路由\n基座是history路由，子应用可以是hash或history路由")]),v._v(" "),a("li",[v._v("初始化DOM ID必须唯一，最好跟子应用name一致")]),v._v(" "),a("li",[v._v("项目中，所有的ID或者class最好加入前缀，防止样式污染，避免使用ID选择器")]),v._v(" "),a("li",[v._v("基座改变子路由必须要传参")])]),v._v(" "),a("h2",{attrs:{id:"改造后的优势"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#改造后的优势"}},[v._v("#")]),v._v(" 改造后的优势")]),v._v(" "),a("ol",[a("li",[v._v("页面刷新后保持子应用路由，不会使子应用路由初始化")]),v._v(" "),a("li")])])}),[],!1,null,null,null);a.default=t.exports}}]);