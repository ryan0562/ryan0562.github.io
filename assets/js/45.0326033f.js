(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{520:function(e,t,n){"use strict";n.r(t);var s=n(2),a=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"换肤实现方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#换肤实现方案"}},[e._v("#")]),e._v(" 换肤实现方案")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fa1fd2c1fb264588bcd6ae11400d23df~tplv-k3u1fbpfcp-zoom-1.image",alt:"前端暗色模式/换肤实现方案"}})]),e._v(" "),t("h2",{attrs:{id:"多套css样式实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多套css样式实现"}},[e._v("#")]),e._v(" 多套CSS样式实现")]),e._v(" "),t("p",[e._v("通过编写多套CSS样式代码来实现，切换功能就通过动态修改"),t("code",[e._v("link")]),e._v("标签的"),t("code",[e._v("href")]),e._v("或者动态添加删除"),t("code",[e._v("link")]),e._v("标签。这方案就不贴代码了......")]),e._v(" "),t("p",[e._v("优点：简单")]),e._v(" "),t("p",[e._v("缺点：维护成本高")]),e._v(" "),t("h2",{attrs:{id:"css变量实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#css变量实现"}},[e._v("#")]),e._v(" CSS变量实现")]),e._v(" "),t("p",[e._v("在CSS里面定义颜色，字体，宽高等变量，通过使用这些变量来实现换肤功能，核心就是切换属性/类名来切换颜色值。")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FAsaki-M%2Fpractice%2Ftree%2Fmain%2Fprofession%2FtoggleTheme%2Fcss-variable",title:"https://github.com/Asaki-M/practice/tree/main/profession/toggleTheme/css-variable",target:"_blank",rel:"noopener noreferrer"}},[e._v("项目源码"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("下面贴出代码展示：")]),e._v(" "),t("p",[e._v("html结构如下："),t("code",[e._v("main")]),e._v("标签里面是内容，上面的"),t("code",[e._v("div")]),e._v("是用来切换皮肤的")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<body>\n  <div>\n    \x3c!-- 这里是切换的按钮 --\x3e\n    <img src="../icons/sum.svg" id="theme">\n  </div>\n  <main class="content">\n    <h1>CSS variable</h1>\n    <p>abcdefghijklmnopqrstuvwxyz,abcdefghijklmnopqrstuvwxyz</p>\n    <p>abcdefghijklmnopqrstuvwxyz</p>\n    <p>abcdefghijklmnopqrstuvwxyz</p>\n    <p>abcdefghijklmnopqrstuvwxyz</p>\n    <button>button</button>\n  </main>\n</body>\n复制代码\n')])])]),t("p",[e._v("css代码如下：当前是使用给"),t("code",[e._v("Body")]),e._v("添加类名的方式来实现切换，定义变量")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\x3c!-- 默认值 --\x3e\n:root {\n  --bg-color-0: #fff;\n  --bg-color-1: #fff;\n  --text-color: #333;\n  --grey-1: #1c1f23;\n}\n\n\x3c!-- 使用 data-theme 属性 --\x3e\n[data-theme='dark'] {\n  --bg-color-1: #35363c;\n}\n\n\x3c!-- 使用css --\x3e\n:root .dark {\n  --bg-color-0: #16161a;\n  --bg-color-1: #35363c;\n  --text-color: #fff;\n  --grey-1: #f9f9f9;\n}\n复制代码\n")])])]),t("p",[e._v("使用定义的变量：通过"),t("code",[e._v("var(param)")]),e._v("使用")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("body {\n  margin: 0;\n  padding: 0;\n  background-color: var(--bg-color-0);\n  transition: all 0.3s;\n}\n\n.content {\n  padding: 20px;\n  background-color: var(--bg-color-1);\n  color: var(--text-color);\n}\n\n.content button {\n  width: 100px;\n  height: 30px;\n  background-color: var(--bg-color-1);\n  color: var(--text-color);\n  border: 1px solid var(--grey-1);\n  outline: none;\n}\n复制代码\n")])])]),t("p",[e._v("通过js来对切换按钮进行一个给"),t("code",[e._v("Body")]),e._v("增加/删除类名的操作。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" const themebtn = document.getElementById('theme')\n  themebtn.addEventListener('click', () => {\n    const body = document.body\n    // 判断当前是否是黑夜模式，从而切换模式\n    if (Array.from(body.classList).indexOf('dark') !== -1) {\n      body.classList.remove('dark')\n      themebtn.src = '../icons/sum.svg'\n    } else {\n      body.classList.add('dark')\n      themebtn.src = '../icons/moon.svg'\n    }\n  })\n复制代码\n")])])]),t("p",[e._v("效果图：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e6719c20cb0c4c70a270c7f10e2ef349~tplv-k3u1fbpfcp-zoom-1.image",alt:"1647849164(1).jpg"}})]),e._v(" "),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8b14d71f731c42c0b2dfbf4e9658f43d~tplv-k3u1fbpfcp-zoom-1.image",alt:"1647849516(1).jpg"}})]),e._v(" "),t("p",[e._v("这种方式实现的一个优缺点")]),e._v(" "),t("p",[e._v("优点：简单易懂")]),e._v(" "),t("p",[e._v("缺点：存在兼容性问题，IE不支持，解决方法也有就是使用"),t("a",{attrs:{href:"https://link.juejin.cn/?target=https%3A%2F%2Fjhildenbiddle.github.io%2Fcss-vars-ponyfill%2F%23%2F",title:"https://jhildenbiddle.github.io/css-vars-ponyfill/#/",target:"_blank",rel:"noopener noreferrer"}},[e._v("css-vars-ponyfill"),t("OutboundLink")],1)]),e._v(" "),t("blockquote",[t("p",[e._v("A "),t("a",{attrs:{href:"https://link.juejin.cn/?target=https%3A%2F%2Fponyfill.com%2F",title:"https://ponyfill.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("ponyfill"),t("OutboundLink")],1),e._v(" that provides client-side support for "),t("a",{attrs:{href:"https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FCSS%2F--*",title:"https://developer.mozilla.org/en-US/docs/Web/CSS/--*",target:"_blank",rel:"noopener noreferrer"}},[e._v("CSS custom properties"),t("OutboundLink")],1),e._v(" (aka “CSS variables”) in legacy and modern browsers.")]),e._v(" "),t("p",[e._v("在旧版和现代浏览器中为 CSS 自定义属性（又称“CSS 变量”）提供客户端支持的 ponyfill。")])]),e._v(" "),t("p",[t("a",{attrs:{href:"https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FCSS%2FUsing_CSS_custom_properties%23browser_compatibility",title:"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties#browser_compatibility",target:"_blank",rel:"noopener noreferrer"}},[e._v("css变量兼容性-MDN"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"sass-less变量实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sass-less变量实现"}},[e._v("#")]),e._v(" Sass/Less变量实现")]),e._v(" "),t("p",[e._v("实现方法跟用CSS变量差不多，也是通过给根元素添加属性/类名来达成切换的效果")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FAsaki-M%2Fpractice%2Ftree%2Fmain%2Fprofession%2FtoggleTheme%2Fscss-variable",title:"https://github.com/Asaki-M/practice/tree/main/profession/toggleTheme/scss-variable",target:"_blank",rel:"noopener noreferrer"}},[e._v("项目源码"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("简单的搭建一个React + SCSS的项目来实现，文件目录如下，主要看"),t("code",[e._v("_variable.scss")]),e._v("和"),t("code",[e._v("_handle.scss")]),e._v("两个文件")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("scss-variable\n├── yarn.lock\n├── package.json\n├── public\n│   └── index.html\n├── src\n│   ├── index.scss\n│   ├── _variable.scss\n│   ├── _handle.scss\n│   ├── index.js\n│   └── app.jsx\n└── webpack.config.js\n复制代码\n")])])]),t("p",[e._v("首先看"),t("code",[e._v("app.jsx")]),e._v("文件，里面编写了页面结构以及切换的逻辑")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import { useCallback, useState } from 'react'\nimport './index.scss'\nconst App = () => {\n  // 定义切换按钮的文案，并且给html附上默认主题类型\n  const [themeText, setThemeText] = useState(() => {\n    document.documentElement.setAttribute('data-theme', 'light')\n    return 'light'\n  })\n  // 切换逻辑\n  const toggleTheme = useCallback(() => {\n    if (themeText === 'light') {\n      document.documentElement.setAttribute('data-theme', 'dark')\n      setThemeText('dark')\n    } else {\n      document.documentElement.setAttribute('data-theme', 'light')\n      setThemeText('light')\n    }\n  })\n  return (\n    <div className=\"content\">\n      <button onClick={toggleTheme}>{themeText}</button>\n      <h1>SCSS variable</h1>\n      <p>abcdefghijklmnopqrstuvwxyz,abcdefghijklmnopqrstuvwxyz</p>\n      <p>abcdefghijklmnopqrstuvwxyz</p>\n      <p>abcdefghijklmnopqrstuvwxyz</p>\n      <p>abcdefghijklmnopqrstuvwxyz</p>\n      <button>button</button>\n    </div>\n  )\n}\n\nexport default App\n复制代码\n")])])]),t("p",[e._v("然后就是"),t("code",[e._v("_variable.scss")]),e._v("和"),t("code",[e._v("_handle.scss")])]),e._v(" "),t("p",[t("code",[e._v("_variable.scss")]),e._v("：定义每个主题的变量")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$themes: (\n    light: (\n        bg-color-0: #fff,\n        bg-color-1: #fff,\n        text-color: #333,\n        grey-1: #1c1f23\n    ),\n    dark: (\n        bg-color-0: #16161a,\n        bg-color-1: #35363c,\n        text-color: #fff,\n        grey-1: #f9f9f9\n    )\n);\n复制代码\n")])])]),t("p",[t("code",[e._v("_handle.scss")]),e._v("：定义mixin来将每个主题的对应颜色字体宽高等等绑定好，只要根据某个mixin来传入对应的key值就好")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('@mixin themeify {\n\n  // 遍历_variable.scss定义的主题\n  @each $theme-name,\n  $theme-map in $themes {\n    // 将每个主题提升为全局变量\n    $theme-map: $theme-map !global;\n\n    // 绑定某个主题下的样式内容\n    [data-theme="#{$theme-name}"] & {\n      @content\n    }\n  }\n}\n\n// 定义一个通过key获取主题变量的值函数\n@function themed($key) {\n  @return map-get($theme-map, $key)\n}\n\n// 下面这些mixin绑定在那个主题就那种颜色\n@mixin bgColor($color) {\n  @include themeify {\n    background-color: themed($color);\n  }\n}\n\n@mixin textColor($color) {\n  @include themeify {\n    color: themed($color);\n  }\n}\n\n@mixin borderColor($color) {\n  @include themeify {\n    border-color: themed($color);\n  }\n}\n复制代码\n')])])]),t("p",[e._v("这里我是已经将"),t("code",[e._v("_variable.scss")]),e._v("和"),t("code",[e._v("_handle.scss")]),e._v("两个文件在webpack里面配置了全局引入了，所以能在"),t("code",[e._v("index.scss")]),e._v("里面使用 "),t("code",[e._v("index.scss")]),e._v("：使用mixin来绑定")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("body {\n  margin: 0;\n  padding: 0;\n  transition: all 0.3s;\n  @include bgColor('bg-color-0');\n}\n\n.content {\n  padding: 20px;\n  @include bgColor('bg-color-1');\n  @include textColor('text-color');\n\n\n  button {\n    width: 100px;\n    height: 30px;\n    border: 1px solid;\n    outline: none;\n    @include bgColor('bg-color-0');\n    @include borderColor('grey-1');\n    @include textColor('text-color');\n\n  }\n}\n复制代码\n")])])]),t("p",[e._v("效果跟CSS变量一致")]),e._v(" "),t("p",[e._v("优点：因为使用webpack进行打包，所以兼容性问题可以解决")]),e._v(" "),t("p",[e._v("缺点：代码可读性不如CSS强")]),e._v(" "),t("h2",{attrs:{id:"动态style实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#动态style实现"}},[e._v("#")]),e._v(" 动态Style实现")]),e._v(" "),t("p",[e._v("这种核心原理就是通过给"),t("code",[e._v("style")]),e._v("标签里面的内容进行更改来实现，这种方案是参考了"),t("a",{attrs:{href:"https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FElemeFE%2Felement%2Fissues%2F3054",title:"https://github.com/ElemeFE/element/issues/3054",target:"_blank",rel:"noopener noreferrer"}},[e._v("ElementUI的换肤"),t("OutboundLink")],1),e._v("来实现。"),t("a",{attrs:{href:"https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FElementUI%2Ftheme-preview",title:"https://github.com/ElementUI/theme-preview",target:"_blank",rel:"noopener noreferrer"}},[e._v("ElementUI换肤DEMO的仓库地址"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FAsaki-M%2Fpractice%2Ftree%2Fmain%2Fprofession%2FtoggleTheme%2Fstyle-override",title:"https://github.com/Asaki-M/practice/tree/main/profession/toggleTheme/style-override",target:"_blank",rel:"noopener noreferrer"}},[e._v("项目源码"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("参照着实现：原理就是读取CSS文件里面的样式，通过把颜色替换成关键字，再选择一种颜色将关键字再次替换，将关键字再将样式通过"),t("code",[e._v("style")]),e._v("标签插入DOM里面。")]),e._v(" "),t("p",[e._v("目录文件："),t("code",[e._v("formula.json")]),e._v("编写颜色，"),t("code",[e._v("color.js")]),e._v("编写颜色转换的逻辑。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("style-override\n├── yarn.lock\n├── package.json\n├── public\n│   └── index.html\n├── src\n│   ├── color.js\n│   ├── formula.json\n│   ├── index.js\n│   └── app.jsx\n└── webpack.config.js\n复制代码\n")])])]),t("p",[t("code",[e._v("formula.json")]),e._v("文件定义颜色与关键字之间的对应关系，这里是用到"),t("a",{attrs:{href:"https://link.juejin.cn/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fcss-color-function",title:"https://www.npmjs.com/package/css-color-function",target:"_blank",rel:"noopener noreferrer"}},[e._v("css-color-function"),t("OutboundLink")],1),e._v("的插件所以写成这样。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n  "bgColor0": "color(primary contrast(50%))",\n  "bgColor1": "color(primary contrast(50%))",\n  "textColor": "color(primary tint(50%))",\n  "grey1": "color(primary tint(50%))"\n}\n复制代码\n')])])]),t("p",[t("code",[e._v("color.js")]),e._v("文件：通过"),t("a",{attrs:{href:"https://link.juejin.cn/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fcss-color-function",title:"https://www.npmjs.com/package/css-color-function",target:"_blank",rel:"noopener noreferrer"}},[e._v("css-color-function"),t("OutboundLink")],1),e._v("将颜色替换到json里面的关键字，并且返回colors对象。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import color from 'css-color-function'\nimport formula from './formula.json'\nconst generateColors = (primary) => {\n  let colors = {}\n  // 遍历formula里面的value，将关键字通过css-color-function换成rgb颜色\n  Object.keys(formula).forEach((key) => {\n    const value = formula[key].replace(/primary/g, primary)\n    // css-color-function提供的convert转换颜色\n    colors[key] = color.convert(value)\n  })\n\n  return colors\n}\nexport default generateColors\n复制代码\n")])])]),t("p",[t("code",[e._v("app.jsx")]),e._v("文件拆分讲解，页面结构如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<div className="content">\n  <input type="color" onChange={toggleTheme} />\n  <h1>CSS variable</h1>\n  <p>abcdefghijklmnopqrstuvwxyz,abcdefghijklmnopqrstuvwxyz</p>\n  <p>abcdefghijklmnopqrstuvwxyz</p>\n  <p>abcdefghijklmnopqrstuvwxyz</p>\n  <p>abcdefghijklmnopqrstuvwxyz</p>\n  <button>button</button>\n</div>\n复制代码\n')])])]),t("p",[e._v("等组件一渲染就通过fetch发请求来读取CSS文件，然后将颜色转换成关键字，最后生成一个CSS模板。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const [styleTemplate, setStyleTemplate] = useState('')\nuseEffect(() => {\nconst colorMap = {\n  '#fff': 'bgColor0',\n  '#fff': 'bgColor1',\n  '#333': 'textColor',\n  '#1c1f23': 'grey1'\n}\nfetch('https://assets.asaki-m.com/template.css')\n  .then((r) => r.text())\n  .then((data) => {\n    let dataText = data\n    // 遍历颜色映射表将颜色转换成关键字\n    Object.keys(colorMap).forEach((key) => {\n      const value = colorMap[key]\n      dataText = dataText.replace(new RegExp(key, 'ig'), value)\n    })\n    // 转换完后设置到变量保存模板\n    setStyleTemplate(dataText)\n  })\n}, [])\n复制代码\n")])])]),t("p",[e._v("颜色选择器选择一个颜色后，根据css模板来修改或生成style标签。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const originalStylesheetCount = document.styleSheets.length\nconst toggleTheme = useCallback((evt) => {\n    let cssText = styleTemplate\n    // 通过input color选择完颜色后，生成关键字与颜色对应的映射\n    let colors = generateColors(evt.target.value)\n    // 遍历映射表重新将关键字替换成rgb颜色\n    Object.keys(colors).forEach((key) => {\n      cssText = cssText.replace(\n        new RegExp('(:|\\s+)' + key, 'g'),\n        '$1' + colors[key]\n      )\n    })\n    // 判断是否已经存在了style标签，不存在就创建一个，存在就直接覆盖里面的内容\n    if (originalStylesheetCount === document.styleSheets.length) {\n      const style = document.createElement('style')\n      style.innerText = cssText\n      document.head.appendChild(style)\n    } else {\n      document.head.lastChild.innerText = cssText\n    }\n})\n复制代码\n")])])]),t("p",[e._v("优点：兼容性问题解决")]),e._v(" "),t("p",[e._v("缺点：上手难度高，维护成本高")]),e._v(" "),t("p",[e._v("效果图：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/30f3f27e6d13448ca139205ffad64767~tplv-k3u1fbpfcp-zoom-1.image",alt:"1647863592(1).jpg"}})]),e._v(" "),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b17736cda6546298bca05715e08c186~tplv-k3u1fbpfcp-zoom-1.image",alt:"1647863615(1).jpg"}})]),e._v(" "),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5ee296a5382a4a0cae14bc7a61b162ce~tplv-k3u1fbpfcp-zoom-1.image",alt:"1647863633(1).jpg"}})]),e._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),t("p",[e._v("总结下来其实就是给根节点添加自定义主题属性/类名，多写几套主题样式，动态生成/修改style。每一种都有自身的缺点，具体使用根据自身条件以及场景使用即可。")]),e._v(" "),t("p",[e._v("上面实现的几种方案都没有做持久化，想要做持久化需要将对应的主题保存到本地缓存里面，然后每次渲染读取缓存的主题，在做一次渲染，并且切换的时候记得修改缓存的主题即可。")]),e._v(" "),t("p",[e._v("当然如果有更好的方案也欢迎指出。")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://juejin.cn/post/7063010855167721486",target:"_blank",rel:"noopener noreferrer"}},[e._v("转载于掘金"),t("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=a.exports}}]);