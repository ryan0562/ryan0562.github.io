(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{559:function(t,s,a){"use strict";a.r(s);var r=a(2),e=Object(r.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("h3",{attrs:{id:"githooks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#githooks"}},[t._v("#")]),t._v(" githooks")]),t._v(" "),s("p",[t._v("Git Hooks 就是在 Git 执行特定事件（如commit、push、receive等）时触发运行的脚本，类似于“钩子函数”，没有设置可执行的钩子将被忽略。")]),t._v(" "),s("p",[t._v("在项目的 .git/hooks 目录中，有一些 .sample 结尾的钩子示例脚本，如果想启用对应的钩子，只需手动删除后缀，即可。（删除某一个 hook 的后缀 .sample 即可启用该 hook 脚本，默认是不启用的。）")]),t._v(" "),s("p",[t._v("【但是，我们一般不去改动 .git/hooks 里面的文件，因为我们使用 husky 】")]),t._v(" "),s("h3",{attrs:{id:"husky"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#husky"}},[t._v("#")]),t._v(" husky")]),t._v(" "),s("p",[t._v("husky 是一个为 git 客户端增加 hook 的工具。安装后，它会自动在仓库中的 .git/ 目录下增加相应的钩子；比如 pre-commit 钩子就会在你执行 git commit 的触发。")]),t._v(" "),s("p",[t._v("那么我们可以在 pre-commit 中实现一些比如 lint 检查、单元测试、代码美化等操作。当然，pre-commit 阶段执行的命令当然要保证其速度不要太慢，每次 commit 都等很久也不是什么好的体验。")]),t._v(" "),s("h3",{attrs:{id:"lint-staged"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lint-staged"}},[t._v("#")]),t._v(" lint-staged")]),t._v(" "),s("p",[t._v("lint-staged，一个仅仅过滤出 Git 代码暂存区文件(被 git add 的文件)的工具；这个很实用，因为我们如果对整个项目的代码做一个检查，可能耗时很长，如果是老项目，要对之前的代码做一个代码规范检查并修改的话，这可能就麻烦了呀，可能导致项目改动很大。")]),t._v(" "),s("p",[t._v("所以这个 lint-staged，对团队项目和开源项目来说，是一个很好的工具，它是对个人要提交的代码的一个规范和约束。")]),t._v(" "),s("h2",{attrs:{id:"执行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行"}},[t._v("#")]),t._v(" 执行")]),t._v(" "),s("h3",{attrs:{id:"下载包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#下载包"}},[t._v("#")]),t._v(" 下载包")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("yarn add husky lint-staged -D\n")])])]),s("h3",{attrs:{id:"配置script"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置script"}},[t._v("#")]),t._v(" 配置script")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//package.json")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"scripts"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"preCommit"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lint-staged"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"lint-staged"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"src/**/*.{js,vue}"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"eslint --fix"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"初始化husky"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初始化husky"}},[t._v("#")]),t._v(" 初始化husky")]),t._v(" "),s("p",[t._v("这个时候本地是没有.husky的文件夹的，需要初始化。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("npx husky-init\n")])])]),s("h3",{attrs:{id:"创建husky钩子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建husky钩子"}},[t._v("#")]),t._v(" 创建husky钩子")]),t._v(" "),s("p",[t._v("执行下述命令会在.husky下创建一个pre-commit的文件")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('npx husky add .husky/pre-commit "npm run preCommit"\n')])])]),s("h2",{attrs:{id:"整个流程路线"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#整个流程路线"}},[t._v("#")]),t._v(" 整个流程路线")]),t._v(" "),s("ol",[s("li",[t._v("commit触发hooks的pre-commit")]),t._v(" "),s("li",[t._v("hooks指向husky")]),t._v(" "),s("li",[t._v("husky调用了npm run preCommit")]),t._v(" "),s("li",[t._v("npm run preCommit 调用 lint-staged")]),t._v(" "),s("li",[t._v("lint-staged 调用了package.json内lint-staged脚本")])]),t._v(" "),s("p",[t._v("不得不说，husky更新到6版本后比之前的操作要麻烦很多，需要在注册脚本，还多了个.husky的的文件，使用成本比之前高了不少")]),t._v(" "),s("h2",{attrs:{id:"ps-常见错误原因"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ps-常见错误原因"}},[t._v("#")]),t._v(" ps：常见错误原因")]),t._v(" "),s("h3",{attrs:{id:"钩子如果没有触发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#钩子如果没有触发"}},[t._v("#")]),t._v(" 钩子如果没有触发")]),t._v(" "),s("ol",[s("li",[t._v("查看一下.git/config文件的hooksPath 路径是否指向了husky")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("hooksPath = .husky\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v(".husky/pre-commit文件是否被创建")])]),t._v(" "),s("h3",{attrs:{id:"commit报错-miss-test"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commit报错-miss-test"}},[t._v("#")]),t._v(" commit报错：miss test")]),t._v(" "),s("p",[t._v("看一下"),s("code",[t._v(".husky/pre-commit")]),t._v("里有没有多余的操作例如：npm run test，删掉即可")])])}),[],!1,null,null,null);s.default=e.exports}}]);